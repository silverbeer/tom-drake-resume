[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "resume"
version = "1.0.0"
description = "Resume as Code (RaC) - AI-Powered DevOps Learning Project"
readme = "README.md"
license = "MIT"
requires-python = ">=3.12"
authors = [
    { name = "Learning Project", email = "learning@resume-as-code.dev" },
]
keywords = [
    "resume",
    "devops",
    "ai",
    "claude",
    "automation",
    "ci-cd",
    "resume-as-code",
    "learning-project",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Text Processing :: Markup :: HTML",
    "Topic :: Text Processing :: Markup :: LaTeX",
]

dependencies = [
    # CLI Framework
    "typer >= 0.9.0",
    "rich >= 13.7.0",
    "click >= 8.1.7",
    # Data Models & Validation
    "pydantic[email] >= 2.5.0",
    "pydantic-settings >= 2.1.0",
    "jsonschema >= 4.20.0",
    # File Processing
    "pyyaml >= 6.0.1",
    "jinja2 >= 3.1.2",
    "toml >= 0.10.2",
    # PDF Generation
    "reportlab>=4.0.7",
    # HTTP & API
    "httpx >= 0.26.0",
    "requests >= 2.31.0",
    # AI Integration
    "anthropic >= 0.8.1",
    "openai >= 1.6.1", # Backup AI provider
    # Date/Time
    "python-dateutil >= 2.8.2",
    # Utilities
    "pathlib-mate >= 1.2.0",
    "python-dotenv >= 1.0.0",
    "structlog >= 23.2.0",
    "colorlog >= 6.8.0",
    "black>=25.1.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    # Testing
    "pytest >= 7.4.3",
    "pytest-cov >= 4.1.0",
    "pytest-mock >= 3.12.0",
    "pytest-xdist >= 3.5.0",
    "pytest-asyncio >= 0.23.0",
    "pytest-html >= 4.1.1",
    "coverage[toml] >= 7.3.3",
    
    # Code Quality
    "ruff >= 0.1.8",
    "mypy >= 1.8.0",
    "black >= 23.12.0",
    "isort >= 5.13.0",
    "bandit >= 1.7.5",
    
    # Pre-commit
    "pre-commit >= 3.6.0",
    
    # Documentation
    "mkdocs >= 1.5.3",
    "mkdocs-material >= 9.5.0",
    "mkdocstrings[python] >= 0.24.0",
    
    # Development Tools
    "ipython >= 8.18.0",
    "ipdb >= 0.13.13",
]

# Production deployment
prod = [
    "gunicorn >= 21.2.0",
    "uvicorn >= 0.24.0",
]

# All dependencies for CI/CD
all = [
    "resume[dev,prod]"
]

[project.urls]
Homepage = "https://github.com/silverbeer/resume-as-code"
Documentation = "https://silverbeer.github.io/resume-as-code/"
Repository = "https://github.com/silverbeer/resume-as-code.git"
Issues = "https://github.com/silverbeer/resume-as-code/issues"
Changelog = "https://github.com/silverbeer/resume-as-code/blob/main/CHANGELOG.md"

[project.scripts]
resume = "resume.cli:app"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/templates",
    "/schemas",
    "README.md",
    "CLAUDE.md",
    "AI_WORKFLOW.md",
]

[tool.hatch.build.targets.wheel]
packages = ["src/resume"]

# ============================================================================
# Tool Configurations
# ============================================================================

[tool.coverage.run]
source = ["src/resume"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
]
show_missing = true
precision = 2
fail_under = 50

[tool.coverage.html]
directory = "htmlcov"

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src/resume",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=50",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ai: marks tests that require AI API access",
    "network: marks tests that require network access",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*unclosed.*:ResourceWarning",
]

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "C90",  # mccabe complexity
    "T20",  # flake8-print
    "SIM",  # flake8-simplify
    "ICN",  # flake8-import-conventions
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "TID",  # flake8-tidy-imports
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate commented code
    "PD",   # pandas-vet
    "PL",   # pylint
    "TRY",  # tryceratops
    "RUF",  # ruff-specific rules
    "S",    # bandit security
]
ignore = [
    "E501",   # Line too long (black handles this)
    "B008",   # Do not perform function calls in argument defaults
    "B006",   # Do not use mutable data structures for argument defaults
    "C901",   # Function is too complex (we'll manage complexity manually)
    "TRY003", # Avoid specifying long messages outside the exception class
    "S101",   # Use of assert detected (allowed in tests)
    "PLR0913", # Too many arguments in function definition
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",   # Use of assert is fine in tests
    "ARG001", # Unused function argument (fixtures)
    "ARG002", # Unused method argument
    "S106",   # Possible hardcoded password in tests
]
"src/resume/cli.py" = [
    "T20",    # Print statements are OK in CLI
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
force-single-line = true
known-first-party = ["resume"]
required-imports = ["from __future__ import annotations"]

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "reportlab.*",
    "anthropic.*",
    "yaml.*",
]
ignore_missing_imports = true

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["resume"]
skip_glob = ["*/migrations/*"]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert and shell usage checks

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/*_test.py"]
